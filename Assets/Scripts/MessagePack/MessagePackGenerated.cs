// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(34)
            {
                { typeof(global::System.Collections.Generic.Dictionary<long, global::Model.Character>), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<long, long>), 1 },
                { typeof(global::System.Collections.Generic.List<global::Model.Character>), 2 },
                { typeof(global::System.Collections.Generic.List<global::Model.Command>), 3 },
                { typeof(global::System.Collections.Generic.List<global::Model.Event>), 4 },
                { typeof(global::System.Collections.Generic.List<global::Model.InteractMenuConfig>), 5 },
                { typeof(global::System.Collections.Generic.List<global::Model.Item>), 6 },
                { typeof(global::System.Collections.Generic.List<global::Model.Place>), 7 },
                { typeof(global::System.Collections.Generic.List<global::Model.Quest>), 8 },
                { typeof(global::System.Collections.Generic.List<global::Model.ShopConfig>), 9 },
                { typeof(global::System.Collections.Generic.List<global::Model.Skill>), 10 },
                { typeof(global::System.Collections.Generic.List<global::Model.TalkTrigger>), 11 },
                { typeof(global::System.Collections.Generic.List<global::Model.TimeTrigger>), 12 },
                { typeof(global::HeroEditor.Common.Enums.WeaponType), 13 },
                { typeof(global::Model.EventType), 14 },
                { typeof(global::Model.ItemType), 15 },
                { typeof(global::Model.PlaceType), 16 },
                { typeof(global::Model.QuestType), 17 },
                { typeof(global::Model.SelectType), 18 },
                { typeof(global::Model.SkillType), 19 },
                { typeof(global::Model.StepValueType), 20 },
                { typeof(global::MessagePackAOTTypes), 21 },
                { typeof(global::Model.Character), 22 },
                { typeof(global::Model.Command), 23 },
                { typeof(global::Model.Event), 24 },
                { typeof(global::Model.InteractMenuConfig), 25 },
                { typeof(global::Model.Item), 26 },
                { typeof(global::Model.Place), 27 },
                { typeof(global::Model.Quest), 28 },
                { typeof(global::Model.ShopConfig), 29 },
                { typeof(global::Model.Skill), 30 },
                { typeof(global::Model.StepValue), 31 },
                { typeof(global::Model.TalkTrigger), 32 },
                { typeof(global::Model.TimeTrigger), 33 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<long, global::Model.Character>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<long, long>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::Model.Character>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::Model.Command>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<global::Model.Event>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<global::Model.InteractMenuConfig>();
                case 6: return new global::MessagePack.Formatters.ListFormatter<global::Model.Item>();
                case 7: return new global::MessagePack.Formatters.ListFormatter<global::Model.Place>();
                case 8: return new global::MessagePack.Formatters.ListFormatter<global::Model.Quest>();
                case 9: return new global::MessagePack.Formatters.ListFormatter<global::Model.ShopConfig>();
                case 10: return new global::MessagePack.Formatters.ListFormatter<global::Model.Skill>();
                case 11: return new global::MessagePack.Formatters.ListFormatter<global::Model.TalkTrigger>();
                case 12: return new global::MessagePack.Formatters.ListFormatter<global::Model.TimeTrigger>();
                case 13: return new MessagePack.Formatters.HeroEditor.Common.Enums.WeaponTypeFormatter();
                case 14: return new MessagePack.Formatters.Model.EventTypeFormatter();
                case 15: return new MessagePack.Formatters.Model.ItemTypeFormatter();
                case 16: return new MessagePack.Formatters.Model.PlaceTypeFormatter();
                case 17: return new MessagePack.Formatters.Model.QuestTypeFormatter();
                case 18: return new MessagePack.Formatters.Model.SelectTypeFormatter();
                case 19: return new MessagePack.Formatters.Model.SkillTypeFormatter();
                case 20: return new MessagePack.Formatters.Model.StepValueTypeFormatter();
                case 21: return new MessagePack.Formatters.MessagePackAOTTypesFormatter();
                case 22: return new MessagePack.Formatters.Model.CharacterFormatter();
                case 23: return new MessagePack.Formatters.Model.CommandFormatter();
                case 24: return new MessagePack.Formatters.Model.EventFormatter();
                case 25: return new MessagePack.Formatters.Model.InteractMenuConfigFormatter();
                case 26: return new MessagePack.Formatters.Model.ItemFormatter();
                case 27: return new MessagePack.Formatters.Model.PlaceFormatter();
                case 28: return new MessagePack.Formatters.Model.QuestFormatter();
                case 29: return new MessagePack.Formatters.Model.ShopConfigFormatter();
                case 30: return new MessagePack.Formatters.Model.SkillFormatter();
                case 31: return new MessagePack.Formatters.Model.StepValueFormatter();
                case 32: return new MessagePack.Formatters.Model.TalkTriggerFormatter();
                case 33: return new MessagePack.Formatters.Model.TimeTriggerFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.HeroEditor.Common.Enums
{

    public sealed class WeaponTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HeroEditor.Common.Enums.WeaponType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HeroEditor.Common.Enums.WeaponType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::HeroEditor.Common.Enums.WeaponType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::HeroEditor.Common.Enums.WeaponType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Model
{

    public sealed class EventTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.EventType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.EventType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Model.EventType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Model.EventType)reader.ReadInt32();
        }
    }

    public sealed class ItemTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.ItemType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.ItemType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Model.ItemType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Model.ItemType)reader.ReadInt32();
        }
    }

    public sealed class PlaceTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.PlaceType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.PlaceType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Model.PlaceType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Model.PlaceType)reader.ReadInt32();
        }
    }

    public sealed class QuestTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.QuestType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.QuestType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Model.QuestType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Model.QuestType)reader.ReadInt32();
        }
    }

    public sealed class SelectTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.SelectType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.SelectType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Model.SelectType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Model.SelectType)reader.ReadInt32();
        }
    }

    public sealed class SkillTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.SkillType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.SkillType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Model.SkillType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Model.SkillType)reader.ReadInt32();
        }
    }

    public sealed class StepValueTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.StepValueType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.StepValueType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Model.StepValueType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Model.StepValueType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    public sealed class MessagePackAOTTypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MessagePackAOTTypes>
    {
        // _Commands
        private static global::System.ReadOnlySpan<byte> GetSpan__Commands() => new byte[1 + 9] { 169, 95, 67, 111, 109, 109, 97, 110, 100, 115 };
        // _Items
        private static global::System.ReadOnlySpan<byte> GetSpan__Items() => new byte[1 + 6] { 166, 95, 73, 116, 101, 109, 115 };
        // _Events
        private static global::System.ReadOnlySpan<byte> GetSpan__Events() => new byte[1 + 7] { 167, 95, 69, 118, 101, 110, 116, 115 };
        // _ShopConfigs
        private static global::System.ReadOnlySpan<byte> GetSpan__ShopConfigs() => new byte[1 + 12] { 172, 95, 83, 104, 111, 112, 67, 111, 110, 102, 105, 103, 115 };
        // _Characters
        private static global::System.ReadOnlySpan<byte> GetSpan__Characters() => new byte[1 + 11] { 171, 95, 67, 104, 97, 114, 97, 99, 116, 101, 114, 115 };
        // _Skills
        private static global::System.ReadOnlySpan<byte> GetSpan__Skills() => new byte[1 + 7] { 167, 95, 83, 107, 105, 108, 108, 115 };
        // _Places
        private static global::System.ReadOnlySpan<byte> GetSpan__Places() => new byte[1 + 7] { 167, 95, 80, 108, 97, 99, 101, 115 };
        // _Quests
        private static global::System.ReadOnlySpan<byte> GetSpan__Quests() => new byte[1 + 7] { 167, 95, 81, 117, 101, 115, 116, 115 };
        // _TimeTriggers
        private static global::System.ReadOnlySpan<byte> GetSpan__TimeTriggers() => new byte[1 + 13] { 173, 95, 84, 105, 109, 101, 84, 114, 105, 103, 103, 101, 114, 115 };
        // _InteractMenuConfigs
        private static global::System.ReadOnlySpan<byte> GetSpan__InteractMenuConfigs() => new byte[1 + 20] { 180, 95, 73, 110, 116, 101, 114, 97, 99, 116, 77, 101, 110, 117, 67, 111, 110, 102, 105, 103, 115 };
        // _TalkTriggers
        private static global::System.ReadOnlySpan<byte> GetSpan__TalkTriggers() => new byte[1 + 13] { 173, 95, 84, 97, 108, 107, 84, 114, 105, 103, 103, 101, 114, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MessagePackAOTTypes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(11);
            writer.WriteRaw(GetSpan__Commands());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Command>>(formatterResolver).Serialize(ref writer, value._Commands, options);
            writer.WriteRaw(GetSpan__Items());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Item>>(formatterResolver).Serialize(ref writer, value._Items, options);
            writer.WriteRaw(GetSpan__Events());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Event>>(formatterResolver).Serialize(ref writer, value._Events, options);
            writer.WriteRaw(GetSpan__ShopConfigs());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.ShopConfig>>(formatterResolver).Serialize(ref writer, value._ShopConfigs, options);
            writer.WriteRaw(GetSpan__Characters());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Character>>(formatterResolver).Serialize(ref writer, value._Characters, options);
            writer.WriteRaw(GetSpan__Skills());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Skill>>(formatterResolver).Serialize(ref writer, value._Skills, options);
            writer.WriteRaw(GetSpan__Places());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Place>>(formatterResolver).Serialize(ref writer, value._Places, options);
            writer.WriteRaw(GetSpan__Quests());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Quest>>(formatterResolver).Serialize(ref writer, value._Quests, options);
            writer.WriteRaw(GetSpan__TimeTriggers());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.TimeTrigger>>(formatterResolver).Serialize(ref writer, value._TimeTriggers, options);
            writer.WriteRaw(GetSpan__InteractMenuConfigs());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.InteractMenuConfig>>(formatterResolver).Serialize(ref writer, value._InteractMenuConfigs, options);
            writer.WriteRaw(GetSpan__TalkTriggers());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.TalkTrigger>>(formatterResolver).Serialize(ref writer, value._TalkTriggers, options);
        }

        public global::MessagePackAOTTypes Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::MessagePackAOTTypes();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan__Commands().Slice(1))) { goto FAIL; }

                        ____result._Commands = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Command>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126913690749279UL) { goto FAIL; }

                        ____result._Items = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Item>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 32497639819199839UL:
                                ____result._Events = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Event>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32488835202634591UL:
                                ____result._Skills = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Skill>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32481099832381535UL:
                                ____result._Places = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Place>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32497661293973855UL:
                                ____result._Quests = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Quest>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan__ShopConfigs().Slice(1))) { goto FAIL; }

                        ____result._ShopConfigs = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.ShopConfig>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan__Characters().Slice(1))) { goto FAIL; }

                        ____result._Characters = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.Character>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7598228315931497567UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495840487271UL) { goto FAIL; }

                                ____result._TimeTriggers = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.TimeTrigger>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7598228341683999839UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495840487271UL) { goto FAIL; }

                                ____result._TalkTriggers = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.TalkTrigger>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 20:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan__InteractMenuConfigs().Slice(1))) { goto FAIL; }

                        ____result._InteractMenuConfigs = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Model.InteractMenuConfig>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Model
{
    public sealed class CharacterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.Character>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // RelationID
        private static global::System.ReadOnlySpan<byte> GetSpan_RelationID() => new byte[1 + 10] { 170, 82, 101, 108, 97, 116, 105, 111, 110, 73, 68 };
        // RelationValue
        private static global::System.ReadOnlySpan<byte> GetSpan_RelationValue() => new byte[1 + 13] { 173, 82, 101, 108, 97, 116, 105, 111, 110, 86, 97, 108, 117, 101 };
        // Skills
        private static global::System.ReadOnlySpan<byte> GetSpan_Skills() => new byte[1 + 6] { 166, 83, 107, 105, 108, 108, 115 };
        // PlaceID
        private static global::System.ReadOnlySpan<byte> GetSpan_PlaceID() => new byte[1 + 7] { 167, 80, 108, 97, 99, 101, 73, 68 };
        // Relations
        private static global::System.ReadOnlySpan<byte> GetSpan_Relations() => new byte[1 + 9] { 169, 82, 101, 108, 97, 116, 105, 111, 110, 115 };
        // ModelID
        private static global::System.ReadOnlySpan<byte> GetSpan_ModelID() => new byte[1 + 7] { 167, 77, 111, 100, 101, 108, 73, 68 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.Character value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(8);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_RelationID());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.RelationID, options);
            writer.WriteRaw(GetSpan_RelationValue());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.RelationValue, options);
            writer.WriteRaw(GetSpan_Skills());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.Skills, options);
            writer.WriteRaw(GetSpan_PlaceID());
            writer.Write(value.PlaceID);
            writer.WriteRaw(GetSpan_Relations());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, long>>(formatterResolver).Serialize(ref writer, value.Relations, options);
            writer.WriteRaw(GetSpan_ModelID());
            writer.Write(value.ModelID);
        }

        public global::Model.Character Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.Character();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RelationID().Slice(1))) { goto FAIL; }

                        ____result.RelationID = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RelationValue().Slice(1))) { goto FAIL; }

                        ____result.RelationValue = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126909512510291UL) { goto FAIL; }

                        ____result.Skills = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 19220998224178256UL:
                                ____result.PlaceID = reader.ReadInt64();
                                continue;
                            case 19221028322701133UL:
                                ____result.ModelID = reader.ReadInt64();
                                continue;
                        }
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Relations().Slice(1))) { goto FAIL; }

                        ____result.Relations = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, long>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.Command>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Global
        private static global::System.ReadOnlySpan<byte> GetSpan_Global() => new byte[1 + 6] { 166, 71, 108, 111, 98, 97, 108 };
        // Description
        private static global::System.ReadOnlySpan<byte> GetSpan_Description() => new byte[1 + 11] { 171, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // Expression
        private static global::System.ReadOnlySpan<byte> GetSpan_Expression() => new byte[1 + 10] { 170, 69, 120, 112, 114, 101, 115, 115, 105, 111, 110 };
        // Condition
        private static global::System.ReadOnlySpan<byte> GetSpan_Condition() => new byte[1 + 9] { 169, 67, 111, 110, 100, 105, 116, 105, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.Command value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Global());
            writer.Write(value.Global);
            writer.WriteRaw(GetSpan_Description());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Description, options);
            writer.WriteRaw(GetSpan_Expression());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Expression, options);
            writer.WriteRaw(GetSpan_Condition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Condition, options);
        }

        public global::Model.Command Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.Command();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 119165519096903UL) { goto FAIL; }

                        ____result.Global = reader.ReadInt32();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Description().Slice(1))) { goto FAIL; }

                        ____result.Description = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Expression().Slice(1))) { goto FAIL; }

                        ____result.Expression = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Condition().Slice(1))) { goto FAIL; }

                        ____result.Condition = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.Event>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // EventType
        private static global::System.ReadOnlySpan<byte> GetSpan_EventType() => new byte[1 + 9] { 169, 69, 118, 101, 110, 116, 84, 121, 112, 101 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Unique
        private static global::System.ReadOnlySpan<byte> GetSpan_Unique() => new byte[1 + 6] { 166, 85, 110, 105, 113, 117, 101 };
        // Description
        private static global::System.ReadOnlySpan<byte> GetSpan_Description() => new byte[1 + 11] { 171, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // Effect
        private static global::System.ReadOnlySpan<byte> GetSpan_Effect() => new byte[1 + 6] { 166, 69, 102, 102, 101, 99, 116 };
        // BranchExpression
        private static global::System.ReadOnlySpan<byte> GetSpan_BranchExpression() => new byte[1 + 16] { 176, 66, 114, 97, 110, 99, 104, 69, 120, 112, 114, 101, 115, 115, 105, 111, 110 };
        // Branch
        private static global::System.ReadOnlySpan<byte> GetSpan_Branch() => new byte[1 + 6] { 166, 66, 114, 97, 110, 99, 104 };
        // Include
        private static global::System.ReadOnlySpan<byte> GetSpan_Include() => new byte[1 + 7] { 167, 73, 110, 99, 108, 117, 100, 101 };
        // Exclude
        private static global::System.ReadOnlySpan<byte> GetSpan_Exclude() => new byte[1 + 7] { 167, 69, 120, 99, 108, 117, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.Event value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_EventType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.EventType>(formatterResolver).Serialize(ref writer, value.EventType, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Unique());
            writer.Write(value.Unique);
            writer.WriteRaw(GetSpan_Description());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Description, options);
            writer.WriteRaw(GetSpan_Effect());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Effect, options);
            writer.WriteRaw(GetSpan_BranchExpression());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.BranchExpression, options);
            writer.WriteRaw(GetSpan_Branch());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.Branch, options);
            writer.WriteRaw(GetSpan_Include());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Include, options);
            writer.WriteRaw(GetSpan_Exclude());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Exclude, options);
        }

        public global::Model.Event Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.Event();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EventType().Slice(1))) { goto FAIL; }

                        ____result.EventType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.EventType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 111555088313941UL:
                                ____result.Unique = reader.ReadInt64();
                                continue;
                            case 127970251793989UL:
                                ____result.Effect = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 114776262931010UL:
                                ____result.Branch = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Description().Slice(1))) { goto FAIL; }

                        ____result.Description = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BranchExpression().Slice(1))) { goto FAIL; }

                        ____result.BranchExpression = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28539428140183113UL:
                                ____result.Include = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 28539428140185669UL:
                                ____result.Exclude = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InteractMenuConfigFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.InteractMenuConfig>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // IconPath
        private static global::System.ReadOnlySpan<byte> GetSpan_IconPath() => new byte[1 + 8] { 168, 73, 99, 111, 110, 80, 97, 116, 104 };
        // MenuResolver
        private static global::System.ReadOnlySpan<byte> GetSpan_MenuResolver() => new byte[1 + 12] { 172, 77, 101, 110, 117, 82, 101, 115, 111, 108, 118, 101, 114 };
        // keyCode
        private static global::System.ReadOnlySpan<byte> GetSpan_keyCode() => new byte[1 + 7] { 167, 107, 101, 121, 67, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.InteractMenuConfig value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_IconPath());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.IconPath, options);
            writer.WriteRaw(GetSpan_MenuResolver());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.MenuResolver, options);
            writer.WriteRaw(GetSpan_keyCode());
            writer.Write(value.keyCode);
        }

        public global::Model.InteractMenuConfig Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.InteractMenuConfig();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7526747875321013065UL) { goto FAIL; }

                        ____result.IconPath = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MenuResolver().Slice(1))) { goto FAIL; }

                        ____result.MenuResolver = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28539401683953003UL) { goto FAIL; }

                        ____result.keyCode = reader.ReadInt64();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.Item>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // ItemType
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemType() => new byte[1 + 8] { 168, 73, 116, 101, 109, 84, 121, 112, 101 };
        // SubItemType
        private static global::System.ReadOnlySpan<byte> GetSpan_SubItemType() => new byte[1 + 11] { 171, 83, 117, 98, 73, 116, 101, 109, 84, 121, 112, 101 };
        // Description
        private static global::System.ReadOnlySpan<byte> GetSpan_Description() => new byte[1 + 11] { 171, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Wealth
        private static global::System.ReadOnlySpan<byte> GetSpan_Wealth() => new byte[1 + 6] { 166, 87, 101, 97, 108, 116, 104 };
        // Unique
        private static global::System.ReadOnlySpan<byte> GetSpan_Unique() => new byte[1 + 6] { 166, 85, 110, 105, 113, 117, 101 };
        // StackCount
        private static global::System.ReadOnlySpan<byte> GetSpan_StackCount() => new byte[1 + 10] { 170, 83, 116, 97, 99, 107, 67, 111, 117, 110, 116 };
        // Effect
        private static global::System.ReadOnlySpan<byte> GetSpan_Effect() => new byte[1 + 6] { 166, 69, 102, 102, 101, 99, 116 };
        // EffectDescription
        private static global::System.ReadOnlySpan<byte> GetSpan_EffectDescription() => new byte[1 + 17] { 177, 69, 102, 102, 101, 99, 116, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // WorldSprite
        private static global::System.ReadOnlySpan<byte> GetSpan_WorldSprite() => new byte[1 + 11] { 171, 87, 111, 114, 108, 100, 83, 112, 114, 105, 116, 101 };
        // IconSprite
        private static global::System.ReadOnlySpan<byte> GetSpan_IconSprite() => new byte[1 + 10] { 170, 73, 99, 111, 110, 83, 112, 114, 105, 116, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.Item value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(12);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_ItemType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.ItemType>(formatterResolver).Serialize(ref writer, value.ItemType, options);
            writer.WriteRaw(GetSpan_SubItemType());
            writer.Write(value.SubItemType);
            writer.WriteRaw(GetSpan_Description());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Description, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Wealth());
            writer.Write(value.Wealth);
            writer.WriteRaw(GetSpan_Unique());
            writer.Write(value.Unique);
            writer.WriteRaw(GetSpan_StackCount());
            writer.Write(value.StackCount);
            writer.WriteRaw(GetSpan_Effect());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Effect, options);
            writer.WriteRaw(GetSpan_EffectDescription());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EffectDescription, options);
            writer.WriteRaw(GetSpan_WorldSprite());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.WorldSprite, options);
            writer.WriteRaw(GetSpan_IconSprite());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.IconSprite, options);
        }

        public global::Model.Item Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.Item();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7309475598741894217UL) { goto FAIL; }

                        ____result.ItemType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.ItemType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6083630221769209171UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6647929UL) { goto FAIL; }

                                ____result.SubItemType = reader.ReadInt32();
                                continue;

                            case 8390322045806929220UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237481UL) { goto FAIL; }

                                ____result.Description = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8246182608496652119UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6648937UL) { goto FAIL; }

                                ____result.WorldSprite = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 114849243817303UL:
                                ____result.Wealth = reader.ReadSingle();
                                continue;
                            case 111555088313941UL:
                                ____result.Unique = reader.ReadInt64();
                                continue;
                            case 127970251793989UL:
                                ____result.Effect = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8462056353360344147UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29806UL) { goto FAIL; }

                                ____result.StackCount = reader.ReadInt32();
                                continue;

                            case 7598259024964838217UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25972UL) { goto FAIL; }

                                ____result.IconSprite = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EffectDescription().Slice(1))) { goto FAIL; }

                        ____result.EffectDescription = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlaceFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.Place>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // PlaceType
        private static global::System.ReadOnlySpan<byte> GetSpan_PlaceType() => new byte[1 + 9] { 169, 80, 108, 97, 99, 101, 84, 121, 112, 101 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // MapID
        private static global::System.ReadOnlySpan<byte> GetSpan_MapID() => new byte[1 + 5] { 165, 77, 97, 112, 73, 68 };
        // Commands
        private static global::System.ReadOnlySpan<byte> GetSpan_Commands() => new byte[1 + 8] { 168, 67, 111, 109, 109, 97, 110, 100, 115 };
        // Child
        private static global::System.ReadOnlySpan<byte> GetSpan_Child() => new byte[1 + 5] { 165, 67, 104, 105, 108, 100 };
        // Parent
        private static global::System.ReadOnlySpan<byte> GetSpan_Parent() => new byte[1 + 6] { 166, 80, 97, 114, 101, 110, 116 };
        // Characters
        private static global::System.ReadOnlySpan<byte> GetSpan_Characters() => new byte[1 + 10] { 170, 67, 104, 97, 114, 97, 99, 116, 101, 114, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.Place value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(8);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_PlaceType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.PlaceType>(formatterResolver).Serialize(ref writer, value.PlaceType, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_MapID());
            writer.Write(value.MapID);
            writer.WriteRaw(GetSpan_Commands());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.Commands, options);
            writer.WriteRaw(GetSpan_Child());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.Child, options);
            writer.WriteRaw(GetSpan_Parent());
            writer.Write(value.Parent);
            writer.WriteRaw(GetSpan_Characters());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, global::Model.Character>>(formatterResolver).Serialize(ref writer, value.Characters, options);
        }

        public global::Model.Place Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.Place();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PlaceType().Slice(1))) { goto FAIL; }

                        ____result.PlaceType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.PlaceType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 293289877837UL:
                                ____result.MapID = reader.ReadInt64();
                                continue;
                            case 431315576899UL:
                                ____result.Child = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8314892176759549763UL) { goto FAIL; }

                        ____result.Commands = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 128017497219408UL) { goto FAIL; }

                        ____result.Parent = reader.ReadInt64();
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Characters().Slice(1))) { goto FAIL; }

                        ____result.Characters = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, global::Model.Character>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QuestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.Quest>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // QuestType
        private static global::System.ReadOnlySpan<byte> GetSpan_QuestType() => new byte[1 + 9] { 169, 81, 117, 101, 115, 116, 84, 121, 112, 101 };
        // Title
        private static global::System.ReadOnlySpan<byte> GetSpan_Title() => new byte[1 + 5] { 165, 84, 105, 116, 108, 101 };
        // Description
        private static global::System.ReadOnlySpan<byte> GetSpan_Description() => new byte[1 + 11] { 171, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // Requirement
        private static global::System.ReadOnlySpan<byte> GetSpan_Requirement() => new byte[1 + 11] { 171, 82, 101, 113, 117, 105, 114, 101, 109, 101, 110, 116 };
        // Award
        private static global::System.ReadOnlySpan<byte> GetSpan_Award() => new byte[1 + 5] { 165, 65, 119, 97, 114, 100 };
        // StartEffect
        private static global::System.ReadOnlySpan<byte> GetSpan_StartEffect() => new byte[1 + 11] { 171, 83, 116, 97, 114, 116, 69, 102, 102, 101, 99, 116 };
        // TerminateEffect
        private static global::System.ReadOnlySpan<byte> GetSpan_TerminateEffect() => new byte[1 + 15] { 175, 84, 101, 114, 109, 105, 110, 97, 116, 101, 69, 102, 102, 101, 99, 116 };
        // CompleteEffect
        private static global::System.ReadOnlySpan<byte> GetSpan_CompleteEffect() => new byte[1 + 14] { 174, 67, 111, 109, 112, 108, 101, 116, 101, 69, 102, 102, 101, 99, 116 };
        // StartEventID
        private static global::System.ReadOnlySpan<byte> GetSpan_StartEventID() => new byte[1 + 12] { 172, 83, 116, 97, 114, 116, 69, 118, 101, 110, 116, 73, 68 };
        // EndEventIDs
        private static global::System.ReadOnlySpan<byte> GetSpan_EndEventIDs() => new byte[1 + 11] { 171, 69, 110, 100, 69, 118, 101, 110, 116, 73, 68, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.Quest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(11);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_QuestType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.QuestType>(formatterResolver).Serialize(ref writer, value.QuestType, options);
            writer.WriteRaw(GetSpan_Title());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Title, options);
            writer.WriteRaw(GetSpan_Description());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Description, options);
            writer.WriteRaw(GetSpan_Requirement());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Requirement, options);
            writer.WriteRaw(GetSpan_Award());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Award, options);
            writer.WriteRaw(GetSpan_StartEffect());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.StartEffect, options);
            writer.WriteRaw(GetSpan_TerminateEffect());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TerminateEffect, options);
            writer.WriteRaw(GetSpan_CompleteEffect());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.CompleteEffect, options);
            writer.WriteRaw(GetSpan_StartEventID());
            writer.Write(value.StartEventID);
            writer.WriteRaw(GetSpan_EndEventIDs());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.EndEventIDs, options);
        }

        public global::Model.Quest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.Quest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_QuestType().Slice(1))) { goto FAIL; }

                        ____result.QuestType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.QuestType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 435611265364UL:
                                ____result.Title = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 431415719745UL:
                                ____result.Award = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8390322045806929220UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237481UL) { goto FAIL; }

                                ____result.Description = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7882832520049419602UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7630437UL) { goto FAIL; }

                                ____result.Requirement = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7378661405930648659UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7627621UL) { goto FAIL; }

                                ____result.StartEffect = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8389754714482568773UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7554121UL) { goto FAIL; }

                                ____result.EndEventIDs = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_TerminateEffect().Slice(1))) { goto FAIL; }

                        ____result.TerminateEffect = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CompleteEffect().Slice(1))) { goto FAIL; }

                        ____result.CompleteEffect = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_StartEventID().Slice(1))) { goto FAIL; }

                        ____result.StartEventID = reader.ReadInt64();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShopConfigFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.ShopConfig>
    {
        // isOpen
        private static global::System.ReadOnlySpan<byte> GetSpan_isOpen() => new byte[1 + 6] { 166, 105, 115, 79, 112, 101, 110 };
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // CharacterID
        private static global::System.ReadOnlySpan<byte> GetSpan_CharacterID() => new byte[1 + 11] { 171, 67, 104, 97, 114, 97, 99, 116, 101, 114, 73, 68 };
        // Currency
        private static global::System.ReadOnlySpan<byte> GetSpan_Currency() => new byte[1 + 8] { 168, 67, 117, 114, 114, 101, 110, 99, 121 };
        // MaxItemCount
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxItemCount() => new byte[1 + 12] { 172, 77, 97, 120, 73, 116, 101, 109, 67, 111, 117, 110, 116 };
        // ShopCondition
        private static global::System.ReadOnlySpan<byte> GetSpan_ShopCondition() => new byte[1 + 13] { 173, 83, 104, 111, 112, 67, 111, 110, 100, 105, 116, 105, 111, 110 };
        // Item
        private static global::System.ReadOnlySpan<byte> GetSpan_Item() => new byte[1 + 4] { 164, 73, 116, 101, 109 };
        // RefreshCount
        private static global::System.ReadOnlySpan<byte> GetSpan_RefreshCount() => new byte[1 + 12] { 172, 82, 101, 102, 114, 101, 115, 104, 67, 111, 117, 110, 116 };
        // Condition
        private static global::System.ReadOnlySpan<byte> GetSpan_Condition() => new byte[1 + 9] { 169, 67, 111, 110, 100, 105, 116, 105, 111, 110 };
        // Recycle
        private static global::System.ReadOnlySpan<byte> GetSpan_Recycle() => new byte[1 + 7] { 167, 82, 101, 99, 121, 99, 108, 101 };
        // Price
        private static global::System.ReadOnlySpan<byte> GetSpan_Price() => new byte[1 + 5] { 165, 80, 114, 105, 99, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.ShopConfig value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(12);
            writer.WriteRaw(GetSpan_isOpen());
            writer.Write(value.isOpen);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_CharacterID());
            writer.Write(value.CharacterID);
            writer.WriteRaw(GetSpan_Currency());
            writer.Write(value.Currency);
            writer.WriteRaw(GetSpan_MaxItemCount());
            writer.Write(value.MaxItemCount);
            writer.WriteRaw(GetSpan_ShopCondition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ShopCondition, options);
            writer.WriteRaw(GetSpan_Item());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.Item, options);
            writer.WriteRaw(GetSpan_RefreshCount());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Serialize(ref writer, value.RefreshCount, options);
            writer.WriteRaw(GetSpan_Condition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Serialize(ref writer, value.Condition, options);
            writer.WriteRaw(GetSpan_Recycle());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Serialize(ref writer, value.Recycle, options);
            writer.WriteRaw(GetSpan_Price());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Serialize(ref writer, value.Price, options);
        }

        public global::Model.ShopConfig Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.ShopConfig();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 121381955007337UL) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1835365449UL:
                                ____result.Item = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CharacterID().Slice(1))) { goto FAIL; }

                        ____result.CharacterID = reader.ReadInt64();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8746956283274491203UL) { goto FAIL; }

                        ____result.Currency = reader.ReadInt64();
                        continue;
                    case 12:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4858651123125870925UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1953396079UL) { goto FAIL; }

                                ____result.MaxItemCount = reader.ReadInt32();
                                continue;

                            case 4857259077667284306UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1953396079UL) { goto FAIL; }

                                ____result.RefreshCount = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ShopCondition().Slice(1))) { goto FAIL; }

                        ____result.ShopCondition = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Condition().Slice(1))) { goto FAIL; }

                        ____result.Condition = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28548147141895506UL) { goto FAIL; }

                        ____result.Recycle = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435459551824UL) { goto FAIL; }

                        ____result.Price = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.Skill>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // SkillType
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillType() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 84, 121, 112, 101 };
        // SelectType
        private static global::System.ReadOnlySpan<byte> GetSpan_SelectType() => new byte[1 + 10] { 170, 83, 101, 108, 101, 99, 116, 84, 121, 112, 101 };
        // WeaponType
        private static global::System.ReadOnlySpan<byte> GetSpan_WeaponType() => new byte[1 + 10] { 170, 87, 101, 97, 112, 111, 110, 84, 121, 112, 101 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Effect
        private static global::System.ReadOnlySpan<byte> GetSpan_Effect() => new byte[1 + 6] { 166, 69, 102, 102, 101, 99, 116 };
        // Cost
        private static global::System.ReadOnlySpan<byte> GetSpan_Cost() => new byte[1 + 4] { 164, 67, 111, 115, 116 };
        // CoolDown
        private static global::System.ReadOnlySpan<byte> GetSpan_CoolDown() => new byte[1 + 8] { 168, 67, 111, 111, 108, 68, 111, 119, 110 };
        // Suit
        private static global::System.ReadOnlySpan<byte> GetSpan_Suit() => new byte[1 + 4] { 164, 83, 117, 105, 116 };
        // Attack
        private static global::System.ReadOnlySpan<byte> GetSpan_Attack() => new byte[1 + 6] { 166, 65, 116, 116, 97, 99, 107 };
        // SelectRange
        private static global::System.ReadOnlySpan<byte> GetSpan_SelectRange() => new byte[1 + 11] { 171, 83, 101, 108, 101, 99, 116, 82, 97, 110, 103, 101 };
        // AttackRange
        private static global::System.ReadOnlySpan<byte> GetSpan_AttackRange() => new byte[1 + 11] { 171, 65, 116, 116, 97, 99, 107, 82, 97, 110, 103, 101 };
        // Level
        private static global::System.ReadOnlySpan<byte> GetSpan_Level() => new byte[1 + 5] { 165, 76, 101, 118, 101, 108 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.Skill value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(13);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_SkillType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.SkillType>(formatterResolver).Serialize(ref writer, value.SkillType, options);
            writer.WriteRaw(GetSpan_SelectType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.SelectType>(formatterResolver).Serialize(ref writer, value.SelectType, options);
            writer.WriteRaw(GetSpan_WeaponType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HeroEditor.Common.Enums.WeaponType>(formatterResolver).Serialize(ref writer, value.WeaponType, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Effect());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Effect, options);
            writer.WriteRaw(GetSpan_Cost());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Cost, options);
            writer.WriteRaw(GetSpan_CoolDown());
            writer.Write(value.CoolDown);
            writer.WriteRaw(GetSpan_Suit());
            writer.Write(value.Suit);
            writer.WriteRaw(GetSpan_Attack());
            writer.Write(value.Attack);
            writer.WriteRaw(GetSpan_SelectRange());
            writer.Write(value.SelectRange);
            writer.WriteRaw(GetSpan_AttackRange());
            writer.Write(value.AttackRange);
            writer.WriteRaw(GetSpan_Level());
            writer.Write(value.Level);
        }

        public global::Model.Skill Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.Skill();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillType().Slice(1))) { goto FAIL; }

                        ____result.SkillType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.SkillType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8742740746885162323UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25968UL) { goto FAIL; }

                                ____result.SelectType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.SelectType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8742734201538831703UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25968UL) { goto FAIL; }

                                ____result.WeaponType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HeroEditor.Common.Enums.WeaponType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1953722179UL:
                                ____result.Cost = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1953068371UL:
                                ____result.Suit = reader.ReadInt64();
                                continue;
                        }
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 127970251793989UL:
                                ____result.Effect = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 118074580956225UL:
                                ____result.Attack = reader.ReadInt32();
                                continue;
                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7959953206068342595UL) { goto FAIL; }

                        ____result.CoolDown = reader.ReadSingle();
                        continue;
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7012795540021470547UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6645614UL) { goto FAIL; }

                                ____result.SelectRange = reader.ReadInt32();
                                continue;

                            case 7012785644350239809UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6645614UL) { goto FAIL; }

                                ____result.AttackRange = reader.ReadInt32();
                                continue;

                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465558725964UL) { goto FAIL; }

                        ____result.Level = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StepValueFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.StepValue>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // ValueType
        private static global::System.ReadOnlySpan<byte> GetSpan_ValueType() => new byte[1 + 9] { 169, 86, 97, 108, 117, 101, 84, 121, 112, 101 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // MinValue
        private static global::System.ReadOnlySpan<byte> GetSpan_MinValue() => new byte[1 + 8] { 168, 77, 105, 110, 86, 97, 108, 117, 101 };
        // MaxValue
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxValue() => new byte[1 + 8] { 168, 77, 97, 120, 86, 97, 108, 117, 101 };
        // StepPoint
        private static global::System.ReadOnlySpan<byte> GetSpan_StepPoint() => new byte[1 + 9] { 169, 83, 116, 101, 112, 80, 111, 105, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.StepValue value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_ValueType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.StepValueType>(formatterResolver).Serialize(ref writer, value.ValueType, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_MinValue());
            writer.Write(value.MinValue);
            writer.WriteRaw(GetSpan_MaxValue());
            writer.Write(value.MaxValue);
            writer.WriteRaw(GetSpan_StepPoint());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Serialize(ref writer, value.StepPoint, options);
        }

        public global::Model.StepValue Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.StepValue();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8104601799168385366UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                ____result.ValueType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Model.StepValueType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7956012608000455763UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.StepPoint = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7310868735423572301UL:
                                ____result.MinValue = reader.ReadInt32();
                                continue;
                            case 7310868735424225613UL:
                                ____result.MaxValue = reader.ReadInt32();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TalkTriggerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.TalkTrigger>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // RelationLimit
        private static global::System.ReadOnlySpan<byte> GetSpan_RelationLimit() => new byte[1 + 13] { 173, 82, 101, 108, 97, 116, 105, 111, 110, 76, 105, 109, 105, 116 };
        // Event
        private static global::System.ReadOnlySpan<byte> GetSpan_Event() => new byte[1 + 5] { 165, 69, 118, 101, 110, 116 };
        // Weight
        private static global::System.ReadOnlySpan<byte> GetSpan_Weight() => new byte[1 + 6] { 166, 87, 101, 105, 103, 104, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.TalkTrigger value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_RelationLimit());
            writer.Write(value.RelationLimit);
            writer.WriteRaw(GetSpan_Event());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.Event, options);
            writer.WriteRaw(GetSpan_Weight());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.Weight, options);
        }

        public global::Model.TalkTrigger Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.TalkTrigger();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RelationLimit().Slice(1))) { goto FAIL; }

                        ____result.RelationLimit = reader.ReadInt64();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 500068349509UL) { goto FAIL; }

                        ____result.Event = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 127991760381271UL) { goto FAIL; }

                        ____result.Weight = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TimeTriggerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Model.TimeTrigger>
    {
        // ID
        private static global::System.ReadOnlySpan<byte> GetSpan_ID() => new byte[1 + 2] { 162, 73, 68 };
        // Year
        private static global::System.ReadOnlySpan<byte> GetSpan_Year() => new byte[1 + 4] { 164, 89, 101, 97, 114 };
        // Month
        private static global::System.ReadOnlySpan<byte> GetSpan_Month() => new byte[1 + 5] { 165, 77, 111, 110, 116, 104 };
        // Event
        private static global::System.ReadOnlySpan<byte> GetSpan_Event() => new byte[1 + 5] { 165, 69, 118, 101, 110, 116 };
        // Weight
        private static global::System.ReadOnlySpan<byte> GetSpan_Weight() => new byte[1 + 6] { 166, 87, 101, 105, 103, 104, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Model.TimeTrigger value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_ID());
            writer.Write(value.ID);
            writer.WriteRaw(GetSpan_Year());
            writer.Write(value.Year);
            writer.WriteRaw(GetSpan_Month());
            writer.Write(value.Month);
            writer.WriteRaw(GetSpan_Event());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.Event, options);
            writer.WriteRaw(GetSpan_Weight());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.Weight, options);
        }

        public global::Model.TimeTrigger Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Model.TimeTrigger();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 17481UL) { goto FAIL; }

                        ____result.ID = reader.ReadInt64();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1918985561UL) { goto FAIL; }

                        ____result.Year = reader.ReadInt32();
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 448629993293UL:
                                ____result.Month = reader.ReadInt32();
                                continue;
                            case 500068349509UL:
                                ____result.Event = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 127991760381271UL) { goto FAIL; }

                        ____result.Weight = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

